#!/usr/bin/env bash
# Input validation and safety checks for PostgreSQL collection

# {{ google_license }}

### Input Validation
#############################################################################
validate_hostname() {
    local hostname="$1"
    local hostname_regex="^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])*\.([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$"
    local ip_regex="^([0-9]{1,3}\.){3}[0-9]{1,3}$"

    if [[ "${hostname}" == "localhost" ]] ||
       [[ "${hostname}" =~ ${hostname_regex} ]] ||
       [[ "${hostname}" =~ ${ip_regex} ]]; then
        return 0
    fi

    log_error "Invalid hostname format: ${hostname}"
    return 1
}

validate_port() {
    local port="$1"

    # Check if port is a number
    if ! [[ "${port}" =~ ^[0-9]+$ ]]; then
        log_error "Port must be a number: ${port}"
        return 1
    fi

    # Check port range
    if (( port < 1 || port > 65535 )); then
        log_error "Port must be between 1 and 65535: ${port}"
        return 1
    fi

    return 0
}

validate_database_name() {
    local dbname="$1"
    local dbname_regex="^[a-zA-Z_][a-zA-Z0-9_]*$"

    if [[ ! "${dbname}" =~ ${dbname_regex} ]]; then
        log_error "Invalid database name format: ${dbname}"
        return 1
    fi

    # Check length
    if (( ${#dbname} > 63 )); then
        log_error "Database name too long (max 63 characters): ${dbname}"
        return 1
    fi

    return 0
}

validate_username() {
    local username="$1"
    local username_regex="^[a-zA-Z_][a-zA-Z0-9_]*$"

    if [[ ! "${username}" =~ ${username_regex} ]]; then
        log_error "Invalid username format: ${username}"
        return 1
    fi

    # Check length
    if (( ${#username} > 63 )); then
        log_error "Username too long (max 63 characters): ${username}"
        return 1
    fi

    return 0
}

### Environment Validation
#############################################################################
validate_environment() {
    local errors=0

    # Check required environment variables
    if [[ -z "${SCRIPT_DIR:-}" ]]; then
        log_error "SCRIPT_DIR environment variable not set"
        ((errors++))
    fi

    if [[ -z "${OUTPUT_DIR:-}" ]]; then
        log_error "OUTPUT_DIR environment variable not set"
        ((errors++))
    fi

    if [[ -z "${SQL_DIR:-}" ]]; then
        log_error "SQL_DIR environment variable not set"
        ((errors++))
    fi

    # Check directory permissions
    if [[ ! -w "${OUTPUT_DIR}" ]]; then
        log_error "Output directory not writable: ${OUTPUT_DIR}"
        ((errors++))
    fi

    if [[ ! -r "${SQL_DIR}" ]]; then
        log_error "SQL directory not readable: ${SQL_DIR}"
        ((errors++))
    fi

    return "${errors}"
}

### File System Validation
#############################################################################
validate_disk_space() {
    local required_mb="$1"
    local dir="$2"
    local available_kb

    # Get available disk space in KB
    if available_kb=$(df -Pk "${dir}" | awk 'NR==2 {print $4}'); then
        local available_mb=$((available_kb / 1024))

        if (( available_mb < required_mb )); then
            log_error "Insufficient disk space in ${dir}. Required: ${required_mb}MB, Available: ${available_mb}MB"
            return 1
        fi
    else
        log_warning "Could not determine available disk space for ${dir}"
        return 0  # Continue anyway
    fi

    return 0
}

validate_file_permissions() {
    local file="$1"
    local required_perms="$2"

    if [[ ! -e "${file}" ]]; then
        log_error "File does not exist: ${file}"
        return 1
    fi

    local actual_perms
    actual_perms=$(stat -c "%a" "${file}")

    if (( actual_perms & required_perms != required_perms )); then
        log_error "Insufficient permissions for ${file}. Required: ${required_perms}, Actual: ${actual_perms}"
        return 1
    fi

    return 0
}

### Collection Parameters Validation
#############################################################################
validate_collection_tag() {
    local tag="$1"
    local tag_regex="^[a-zA-Z0-9_-]+$"

    if [[ ! "${tag}" =~ ${tag_regex} ]]; then
        log_error "Invalid collection tag format: ${tag}"
        return 1
    fi

    # Check length
    if (( ${#tag} > 32 )); then
        log_error "Collection tag too long (max 32 characters): ${tag}"
        return 1
    fi

    return 0
}

validate_dma_ids() {
    local id_regex="^[a-zA-Z0-9_-]*$"

    # DMA Source ID validation (optional)
    if [[ -n "${DMA_SOURCE_ID:-}" ]] && [[ ! "${DMA_SOURCE_ID}" =~ ${id_regex} ]]; then
        log_error "Invalid DMA_SOURCE_ID format: ${DMA_SOURCE_ID}"
        return 1
    fi

    # DMA Manual ID validation (optional)
    if [[ -n "${DMA_MANUAL_ID:-}" ]] && [[ ! "${DMA_MANUAL_ID}" =~ ${id_regex} ]]; then
        log_error "Invalid DMA_MANUAL_ID format: ${DMA_MANUAL_ID}"
        return 1
    fi

    return 0
}

### Initialization
#############################################################################
log_debug "Validation utilities loaded"
